{"version":3,"sources":["components/Header.js","components/Account.js","components/AccountList.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","class","Account","userName","text","AccountList","accounts","map","account","Form","newAccount","useState","setText","onSubmit","e","console","log","preventDefault","alert","placeholder","value","type","onChange","target","App","setAccounts","Math","floor","random","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAoBeA,EAnBA,WACX,OACI,gCACI,iCACI,6BAAYC,GAAG,iBAAf,UACA,oBAAIC,MAAM,aAAV,6CACA,oBAAIA,MAAM,UAAV,SAAoB,sBAAMA,MAAM,aAAZ,yBAGxB,+BACI,uDCFDC,EARC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACd,OACI,8BACI,oBAAIF,MAAM,UAAV,SAAqBE,EAASC,UCM3BC,EARK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAClB,OACI,8BACKA,EAASC,KAAI,SAACC,GAAD,OAAa,cAAC,EAAD,CAA2BL,SAAUK,GAAtBA,EAAQR,UCqB/CS,EAxBF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACHC,mBAAS,IADN,mBACpBP,EADoB,KACdQ,EADc,KAc3B,OACI,8BACI,uBAAMX,MAAM,cAAcY,SAZjB,SAACC,GACdC,QAAQC,IAAI,CAACZ,SACbU,EAAEG,iBACGb,GAILM,EAAW,CAACN,SACZQ,EAAQ,KAJJM,MAAM,2BAQN,UACI,uBAAOC,YAAY,8BAA8BlB,MAAM,iBAAiBmB,MAAOhB,EAAMiB,KAAK,OAAOC,SAAU,SAACR,GAAD,OAAOF,EAAQE,EAAES,OAAOH,UACnI,uBAAOnB,MAAM,qBAAqBoB,KAAK,SAASD,MAAM,cCQvDI,MAvBf,WAAgB,IAAD,EACmBb,mBAAS,IAD5B,mBACNL,EADM,KACImB,EADJ,KAYb,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMf,WARS,SAACF,GAClB,IAAMR,EAAK0B,KAAKC,MAAoB,IAAdD,KAAKE,QAAkB,EACvClB,EAAU,aAAIV,MAAMQ,GAC1BiB,EAAY,CAACf,GAAF,mBAAiBJ,QAMzBA,EAASuB,OAAS,GAAK,cAAC,EAAD,CAAavB,SAAUA,QCTtCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e70501e.chunk.js","sourcesContent":["\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <header>\r\n                <containter id=\"titleContainer\">\r\n                <h1 class=\"title-page\"> Instagram Viral Content Finder</h1>\r\n                <h3 class=\"version\"><span class=\"versiontxt\">v1.0</span></h3>\r\n                </containter>\r\n            </header>\r\n            <head>\r\n                <title>\r\n                    IG Viral Bot\r\n                </title>\r\n            </head>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","\r\nconst Account = ({userName}) => {\r\n    return (\r\n        <div>\r\n            <h2 class=\"account\">{userName.text}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account\r\n","import Account from './Account'\r\n\r\nconst AccountList = ({accounts}) => {\r\n    return (\r\n        <div>\r\n            {accounts.map((account) => <Account key= {account.id} userName={account} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountList\r\n","import {useState} from 'react'\r\n\r\nconst Form = ({newAccount}) => {\r\n    const [text, setText] = useState(\"\")\r\n\r\n\r\n    const onSubmit = (e) => {\r\n        console.log({text})\r\n        e.preventDefault()\r\n        if (!text) {\r\n            alert('Please type a username')\r\n            return\r\n        }\r\n        newAccount({text})\r\n        setText(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <form class=\"add-account\" onSubmit={onSubmit}>\r\n                <input placeholder=\"add an instagram account...\" class='add-account-sb' value={text} type=\"text\" onChange={(e) => setText(e.target.value)}></input>\r\n                <input class='add-account-submit' type=\"submit\" value=\"Add\"></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import Header from './components/Header'\nimport AccountList from './components/AccountList'\nimport Form from './components/Form.js'\nimport {useState} from 'react'\n\nfunction App() {\n  const [accounts, setAccounts] = useState([])\n\n\n\n  // Add an account\n\n  const addAccount = (account) => {\n    const id = Math.floor(Math.random * 10000) + 1\n    const newAccount = {id,...account}\n    setAccounts([newAccount, ...accounts])\n  }\n  return (\n    <div>\n      <Header />\n      <Form newAccount={addAccount}/>\n      {accounts.length > 0 && <AccountList accounts={accounts} />}\n    </div>\n\n\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}